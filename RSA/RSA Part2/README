RSA Part 2 uses the SHA256 function to encrypt a message into a 256 bit hash code, then encrypt using our keys generated by Part 1. 

private key = (d, n)
public key = (e, n)

The encrpytion involves using the RSA formula M^d % n, giving us a digital signature to use for sending the message without it being
read without decrypting it with the public key. To decrypt, this requires the public key to be used on the signature.

decrypt = ((M^d %n)^e) % n

The message cannot be read if the message was tampered with in the process of being sent, i.e., the signature was corrupted. 

I do not own the SHA256 files or functionality. The function was imported from http://www.zedwood.com/article/cpp-sha256-function
The function is used for education purposes, and to convert a given message into hash code for the rest of my project to manipulate.
